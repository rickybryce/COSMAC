                        ; CLOCK PROGRAM FOR COSMAC MICROCONTROLLER TRAINING UNIT
                        ; EF1 STARTS AND PAUSES THE TIMER
                        ; EF2 RESETS THE TIMER
                        ; COMPILED WITH A18 ASSEMBLER
                        ; IN DEBIAN LINUX, I CREATED THE FOLLOWING SCRIPT
                        ; NAMED ASM18
                        
                        ; #!/bin/bash
                        ;./a18 $1.asm -l $1.lst -o $1.hex
                        
                        ; THEN MAKE IT EXECUTABLE chmod +x ASM18
                        ; TO COMPILE:  ./ASM18 FILENAME
                        
                        
   7000                 GPIO1:      EQU 7000H
   7102                 SEGMENT:    EQU 7102H
   7101                 DIGIT:      EQU 7101H
   8300                 HUNDREDTHS: EQU 8300H
   8301                 TENTHS:     EQU 8301H
   8302                 ONES:       EQU 8302H
   8303                 TENS:       EQU 8303H
   8304                 HUNDREDS:   EQU 8304H
   8305                 THOUSANDS:  EQU 8305H
   8306                 FREERUN:    EQU 8306H
   8307                 EFLAGS:     EQU 8307H
   8308                 TEMP:       EQU 8308H
   2756                 BREAK:      EQU 2756H
                        
                        
   8000                     ORG    8000H
   0000                 R0    EQU    0  ; PROGRAM COUNTER
   0001                 R1    EQU    1
   0002                 R2    EQU    2  ; TEMP
   0003                 R3    EQU    3  ; SUBROUTINES
   0004                 R4    EQU    4  ; SEGMENT
   0005                 R5    EQU    5  ; DIGIT
   0006                 R6    EQU    6  ; BUFFER WORKSPACE
   0007                 R7    EQU    7  ; DELAY
   0008                 R8    EQU    8  ; LOOP COUNT FOR DIGIT SCAN
   0009                 R9    EQU    9  ; VALUES
   000a                 RA    EQU    10 ; BUFFERS
   000b                 RB    EQU    11 ; SCAN DIGIT
   000c                 RC    EQU    12 ; INDIRECT REGISTER
   000d                 RD    EQU    13 ; EFLAGS
   000e                 RE    EQU    14 ; GPIO
   000f                 RF    EQU    15 ; FREERUN
                        
   8000   f8 80 b3 f8   INIT:  LOAD    R3, DELAY     ; INITIALIZE REGISTERS
   8004   9b a3         
   8006   f8 71 b4 f8           LOAD    R4, SEGMENT     ; INDIVIDUAL SEGMENTS OF DIGIT
   800a   02 a4         
   800c   f8 71 b5 f8           LOAD    R5, DIGIT       ; TURN ON DIGIT
   8010   01 a5         
   8012   f8 83 bf f8           LOAD    RF, FREERUN     ; DELAY LOOP (FREE RUNNING)
   8016   06 af         
   8018   f8 00                 LDI     00H             ; LOAD ZERO TO ACCUMULATOR
   801a   5f                    STR     RF              ; CLEAR FREERUN
   801b   f8 70 be f8           LOAD    RE, GPIO1       ; RE WILL BE FORGPIO
   801f   00 ae         
   8021   f8 00                 LDI     00H             ; RELOAD ZERO TO ACCUMULATOR
   8023   5e                    STR     RE              ; CLEAR GPIO1
   8024   f8 83 bd f8           LOAD    RD, EFLAGS      ; RD WILL BE FOR EFLAGS
   8028   07 ad         
   802a   f8 00                 LDI     00H             ; RELOAD ZERO TO ACCUMULATOR
   802c   5d                    STR     RD              ; CLEAR EFLAGS
   802d   f8 83 bc f8           LOAD    RC, HUNDREDTHS  ; RC BECOMES HUNDREDTHS MEMORY
   8031   00 ac         
   8033   f8 00                 LDI     00H             ; RELOAD ZERO
   8035   5c                    STR     RC              ; CLEAR HUNDREDTHS
   8036   f8 83 bc f8           LOAD    RC, TENTHS      ; NOW, RC BECOMES TENTHS
   803a   01 ac         
   803c   f8 00                 LDI     00H             ; RELOAD ZERO
   803e   5c                    STR     RC              ; CLEAR TENTHS
   803f   f8 83 bc f8           LOAD    RC, ONES        ; NOW LOAD RC WITH ONES
   8043   02 ac         
   8045   f8 00                 LDI     00H             ; RELOAD ZERO
   8047   5c                    STR     RC              ; CLEAR ONES
   8048   f8 83 bc f8           LOAD    RC, TENS        ; RC BECOMES TENS
   804c   03 ac         
   804e   f8 00                 LDI     00H             ; RELOAD ZERO
   8050   5c                    STR     RC              ; CLEAR TENS
   8051   f8 83 bc f8           LOAD    RC, HUNDREDS    ; RC BECOMES HUNDREDS
   8055   04 ac         
   8057   f8 00                 LDI     00H             ; RELOAD ZERO
   8059   5c                    STR     RC              ; CLEAR HUNDREDS
   805a   f8 83 bc f8           LOAD    RC, THOUSANDS   ; FINALLY RC=THOUSANDS MEMORY
   805e   05 ac         
   8060   f8 00                 LDI     00H             ; RELOAD ZERO
   8062   5c                    STR     RC              ; CLEAR THOUSANDS
   8063   7a                    REQ                     ; SHUT OFF Q OUTPUT (RESET)
                        
   8064   f8 80 ba f8   MAIN:   LOAD    RA, BUFFER5     ; RA BECOMES BUFFERS MEMORY
   8068   a5 aa         
   806a   f8 80 b9 f8           LOAD    R9, VALUES      ; R9 BECOMES VALUES MEMORY
   806e   b1 a9         
   8070   c0 82 4b              LBR     CHKEF1          ; CHECK EF BUTTONS
   8073   39 7f         CONT2:  BNQ     CONT            ; IF Q IS NOT SET, CONTINUE
   8075   ef                    SEX     RF              ; SET INDEX REGISTER TO FREE RUN
   8076   f8 01                 LDI     01H             ; LOAD ACCUMULATOR WITH 1
   8078   f4                    ADD                     ; ADD 1 TO FREERUN
   8079   5f                    STR     RF              ; UPDATE FREERUN
   807a   fb 1d                 XRI     1DH             ; CALIBRATE TIME WAS 1F
   807c   c2 80 f9              LBZ     COUNT           ; IF TIME IS REACHED, THEN COUNT
   807f   f8 80 bb f8   CONT:   LOAD    RB, SCAN_DIGIT  ; OUTPUT TO TURN ON DIGITS
   8083   ab ab         
   8085   f8 06                 LDI     6               ; WE HAVE 6 DIGITS
   8087   a8                    PLO     R8      ; LOOP COUNT
   8088   0b            LOOP:   LDN     RB      ; GET DIGIT CONTROL
   8089   fb ff                 XRI     0FFH    ; COMPLEMENT IT (ACTIVE LOW)
   808b   55                    STR     R5      ; WRITE TO DIGIT
   808c   0a                    LDN     RA      ; GET BYTE FROM BUFFER
   808d   54                    STR     R4      ; WRITE TO SEGMENT
   808e   d3                    SEP     R3      ; DELAY
   808f   f8 00                 LDI     0       ; TURN OFF DISPLAY
   8091   54                    STR     R4      ; ZERO SEGMENT
   8092   1a                    INC     RA      ; INCREMENT BUFFER
   8093   1b                    INC     RB      ; INCREMENT DIGIT
   8094   28                    DEC     R8      ; DECREMENT LOOP COUNT
   8095   88                    GLO     R8      ; GET THE LOOP NUMBER
   8096   3a 88                 BNZ     LOOP    ; CONTINUE UNTIL 6 DIGITS
   8098   30 64                 BR      MAIN    ; GO TO MAIN ROUTINE
                        
                        
   809a   d0            RET_DELAY: SEP  R0      ; EXIT SUBROUTINE SET PC BACK TO R0
   809b   f8 01         DELAY:  LDI     01H     ; LOAD 1 TO ACC
   809d   a7                    PLO     R7      ; PLACE 1 INTO R7
   809e   27            DELAY1: DEC     R7      ; DECREMENT R7
   809f   c4                    NOP
   80a0   87                    GLO     R7      ; GET R7 AGAIN
   80a1   3a 9e                 BNZ     DELAY1  ; CONTINUE UNTIL R7=0
   80a3   30 9a                 BR      RET_DELAY ; EXIT SUBROUTINE
                        
                        
   80a5   bd            BUFFER5:     DB 0BDH ; ZERO THOUSANDS
   80a6   bd            BUFFER4:     DB 0BDH ; ZERO HUNDREDS
   80a7   bd            BUFFER3:     DB 0BDH ; ZERO TENS
   80a8   bd            BUFFER2:     DB 0BDH ; ZERO ONES
   80a9   bd            BUFFER1:     DB 0BDH ; ZERO TENTHS
   80aa   bd            BUFFER0:     DB 0BDH ; ZERO HUNDREDTHS
   80ab   20 10 08 04   SCAN_DIGIT: DB 20H, 10H, 8, 4, 2, 1 ; BIT NUMBERS TO TURN ON EACH DISPLAY
   80af   02 01         
                                        ; VALUES THAT REPRESENT NUMBERS
   80b1   bd 30 9b ba   VALUES:     DB 0BDH, 030H, 09BH, 0BAH, 036H, 0AEH, 0AFH, 038H, 0BFH, 03EH
   80b5   36 ae af 38   
   80b9   bf 3e         
                        
                        
   80bb   c0 80 fc      LIHNTH: LBR     IHNTH
                        
   80be   3d bb         ZERO:   BN2     LIHNTH
   80c0   f8 83 bc f8   UNCZRO: LOAD    RC, HUNDREDTHS  ; LOAD RC WITH HUNDREDS
   80c4   00 ac         
   80c6   f8 00                 LDI     00H             ; LOAD ZERO TO ACC
   80c8   5c                    STR     RC              ; ZERO HUNDREDTHS
   80c9   f8 83 bc f8           LOAD    RC, TENTHS      ; LOAD RC WITH TENTHS
   80cd   01 ac         
   80cf   f8 00                 LDI     00H             ; ZERO ACC
   80d1   5c                    STR     RC              ; RESET TENTHS
   80d2   f8 83 bc f8           LOAD    RC, ONES        ; LOAD RC WITH ONES
   80d6   02 ac         
   80d8   f8 00                 LDI     00H             ; ZERO ACC
   80da   5c                    STR     RC              ; RESET ONES
   80db   f8 83 bc f8           LOAD    RC, TENS        ; LOAD RC WITH TENS
   80df   03 ac         
   80e1   f8 00                 LDI     00H             ; ZERO ACC
   80e3   5c                    STR     RC              ; RESET TENS
   80e4   f8 83 bc f8           LOAD    RC, HUNDREDS    ; LOAD RC WITH HUNDREDS
   80e8   04 ac         
   80ea   f8 00                 LDI     00H             ; ZERO ACC
   80ec   5c                    STR     RC              ; SERO HUNDREDS
   80ed   f8 83 bc f8           LOAD    RC, THOUSANDS   ; LOAD RC WITH THOUSANDS
   80f1   05 ac         
   80f3   f8 00                 LDI     00H             ; LOAD ZERO TO ACC
   80f5   5c                    STR     RC              ; ZERO THOUSANDS
   80f6   c0 81 a4              LBR     UPDB            ; UPDATE
                        
   80f9   f8 00         COUNT:  LDI     00H             ; LOAD ZERO TO ACCUMULATOR
   80fb   5f                    STR     RF              ; ZERO FREERUN
   80fc   f8 83 bc f8   IHNTH:  LOAD    RC, HUNDREDTHS  ; RC BECOMES HUNDREDTHS
   8100   00 ac         
   8102   ec                    SEX     RC              ; SET INDEX REGISTER TO RC
   8103   f8 02                 LDI     02H             ; LOAD 02H (TOO SLOW FOR 01)
                                                        ; SO WE ONLY COUNT BY 2
   8105   f4                    ADD                     ;INCREMENT TIMER
   8106   5c                    STR     RC      ;HUNDREDTHS NOW CONTAINS THE HUNDREDTHS VALUE
   8107   0c                    LDN     RC              ; LOAD HUNDREDTHS
   8108   fb 0a                 XRI     0AH             ; SEE IF IT'S REACHED 0A
   810a   c2 81 10              LBZ     ITNTH           ; IF SO, INC TENTHS, RESET HUNDREDTHS
   810d   c0 81 a4              LBR     UPDB            ; IF NOT, UPDATE THE DISPLAY
                        
   8110   f8 83 bc f8   ITNTH:  LOAD    RC, HUNDREDTHS  ; RELOAD RC WITH HUNDREDTHS
   8114   00 ac         
   8116   f8 00                 LDI     0H              ; LOAD ZERO TO ACC
   8118   5c                    STR     RC              ; ZERO HUNDREDTHS
   8119   f8 83 bc f8           LOAD    RC, TENTHS      ; RELOAD RC WITH TENTHS
   811d   01 ac         
   811f   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   8120   f8 01                 LDI     01H             ; LOAD 1 TO THE ACCUMULATOR
   8122   f4                    ADD                     ; ADD 1 TO TENTHS
   8123   5c                    STR     RC      ;RC NOW CONTAINS THE TENTHS VALUES
   8124   0c                    LDN     RC              ; RELOAD RC
   8125   fb 0a                 XRI     0AH             ; CHECK IT FOR 0AH
   8127   c2 81 2d              LBZ     IONES           ; IF SO, THEN RESET TENTHS, INC ONES
   812a   c0 81 a4              LBR     UPDB            ; OTHERWISE UPDATE
                        
   812d   f8 83 bc f8   IONES:  LOAD    RC, TENTHS      ; LOAD RC WITH TENTHS
   8131   01 ac         
   8133   f8 00                 LDI     0H              ; ZERO ACCUMULATOR
   8135   5c                    STR     RC              ;CLEAR TENTHS
   8136   f8 83 bc f8           LOAD    RC, ONES        ; RELOAD RC WITH ONES
   813a   02 ac         
   813c   ec                    SEX     RC              ; SET RC AS THE INDEX REGISTER
   813d   f8 01                 LDI     01H             ; LOAD 01H TO ACC
   813f   f4                    ADD                     ; ADD 1 TO ONES
   8140   5c                    STR     RC      ;RC NOW CONTAINS THE ONES VALUES
   8141   0c                    LDN     RC              ; RELOAD ONES
   8142   fb 0a                 XRI     0AH             ; SEE IF IT'S REACHED 0AH
   8144   c2 81 4a              LBZ     ITENS           ; IF SO, THEN RESET ONES, INCREMENT TENS
   8147   c0 81 a4              LBR     UPDB            ; OTHERWISE, UPDATE
                        
   814a   f8 83 bc f8   ITENS:  LOAD    RC, ONES        ; LOAD RC WITH ONES
   814e   02 ac         
   8150   f8 00                 LDI     0H              ; ZERO ACC
   8152   5c                    STR     RC              ;ONES ARE NOW ZERO
   8153   f8 83 bc f8           LOAD    RC, TENS        ; RELOAD RC WITH TENS
   8157   03 ac         
   8159   ec                    SEX     RC              ; SET RC AS THE INDEX REGISTER
   815a   f8 01                 LDI     01H             ; LOAD 1 TO ACCUMULATOR
   815c   f4                    ADD                     ; ADD ONE TO TENS
   815d   5c                    STR     RC              ; STORE INCREMENTED VALUE TO TENS
   815e   0c                    LDN     RC              ; RLOAD RC
   815f   fb 0a                 XRI     0AH             ; CHECK TO SEE IF IT'S REACHED A
   8161   c2 81 67              LBZ     IHUN            ; IF SO, RESET TENS, INCREMENT HUNDREDS
   8164   c0 81 a4              LBR     UPDB            ; OTHERWISE, UPDATE
                        
   8167   f8 83 bc f8   IHUN:   LOAD    RC, TENS        ; LOAD RC WITH TENS
   816b   03 ac         
   816d   f8 00                 LDI     0H              ; ZERO ACC
   816f   5c                    STR     RC              ; TENS NOW CONTAINS A ZERO
   8170   f8 83 bc f8           LOAD    RC, HUNDREDS    ; SET RC TO HUNDREDS
   8174   04 ac         
   8176   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   8177   f8 01                 LDI     01H             ; LOAD 1 TO ACC
   8179   f4                    ADD                     ; ADD 1 TO HUNDREDS
   817a   5c                    STR     RC              ; HUNDREDS NOW HAVE THE INCREMENTED VALUE
   817b   0c                    LDN     RC              ; RELOAD HUNDREDS
   817c   fb 0a                 XRI     0AH             ; SEE IF IT'S REACHED A
   817e   c2 81 84              LBZ     ITHOU           ; IF SO, RESET HUNDREDS, INCREMENT THOUSANDS
   8181   c0 81 a4              LBR     UPDB            ; OTHERWISE, UPDATE
                        
   8184   f8 83 bc f8   ITHOU:  LOAD    RC, HUNDREDS    ; LOAD RC WITH HUNDREDS
   8188   04 ac         
   818a   f8 00                 LDI     0H              ; LOAD ZERO TO ACC
   818c   5c                    STR     RC              ; STORE ZERO TO HUNDREDS
   818d   f8 83 bc f8           LOAD    RC, THOUSANDS   ; RC BECOMES THOUSANDS
   8191   05 ac         
   8193   ec                    SEX     RC              ; SET INDEX REGISTER TO RC
   8194   f8 01                 LDI     01H             ; LOAD 1 TO ACC
   8196   f4                    ADD                     ; INCREMENT THOUSANDS
   8197   5c                    STR     RC              ; THOUSANDS NOW CONTAIN INCREMENTED VALUE
   8198   0c                    LDN     RC              ; RELOAD THOUSANDS
   8199   fb 0a                 XRI     0AH             ; CHECK TO SEE IF IT'S REACHED A
   819b   c2 80 c0              LBZ     UNCZRO          ; IF SO, RESTART TIMER
   819e   c0 81 a4              LBR     UPDB            ; OTHERWISE UPDATE
                        
   81a1   c0 80 7f      CONT1:  LBR     CONT            ; CONTINUE (SHORT TO LONG BRANCH ADAPTER)
                        
                        
   81a4   c4            UPDB:   NOP     ; UPDATE LOGIC
   81a5   f8 80 b9 f8   UHNTH:  LOAD    R9, VALUES      ; R9 IS VALUES
   81a9   b1 a9         
   81ab   f8 83 bc f8           LOAD    RC, HUNDREDTHS  ; START RC WITH HUNDREDTHS
   81af   00 ac         
   81b1   ec                    SEX     RC              ; INDEX REGISTER WILL BE RC
   81b2   89                    GLO     R9              ; GET THE LOW BYTE
   81b3   f4                    ADD                     ; ADD LOW BYTE TO GET BIT PATTERN
   81b4   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR HUNDREDTHS
   81b5   f8 80 b6 f8           LOAD    R6, BUFFER0     ; R6 BECOMES BUFFER ZERO
   81b9   aa a6         
   81bb   09                    LDN     R9              ; LOAD VALUE OF HUNDREDTHS
   81bc   56                    STR     R6              ; STORE TO R6 (BUFFER0 WORKSPACE)
                        
   81bd   f8 80 b9 f8   UTNTHS: LOAD    R9, VALUES      ; R9 IS VALUES
   81c1   b1 a9         
   81c3   f8 83 bc f8           LOAD    RC, TENTHS      ; RC IS NOW TENTHS
   81c7   01 ac         
   81c9   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   81ca   89                    GLO     R9              ; GET THE BITT PATTERN ADDRESS
   81cb   f4                    ADD                     ; FIND THE RIGHT BITT PATTERN
   81cc   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR TENTHS
   81cd   f8 80 b6 f8           LOAD    R6, BUFFER1     ; R6 BECOMES BUFFER 1
   81d1   a9 a6         
   81d3   09                    LDN     R9              ; LOAD THE BIT PATTERN TO MEMORY
   81d4   56                    STR     R6              ; STORE THIS TO BUFFER1
                        
                        
   81d5   f8 80 b9 f8   UONES:  LOAD    R9, VALUES      ; BE SURE R9 IS CODED VALUES
   81d9   b1 a9         
   81db   f8 83 bc f8           LOAD    RC, ONES        ; RC BECOMES ONES
   81df   02 ac         
   81e1   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   81e2   89                    GLO     R9              ; GET STARTING VALUE CODE FROM FROM R9
   81e3   f4                    ADD                     ; FIND THE BIT PATTERN TO DISPLAY
   81e4   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR ONES
   81e5   f8 80 b6 f8           LOAD    R6, BUFFER2     ; R6 BECOMES BUFFER2
   81e9   a8 a6         
   81eb   09                    LDN     R9              ; LOAD THE BIT PATTERN FOR THE VALUE
   81ec   56                    STR     R6              ; STORE THIS TO BUFFER2
                                
                                ; UPDATE GPIO
   81ed   f8 83 bc f8           LOAD    RC,TENS
   81f1   03 ac         
   81f3   0c                    LDN     RC
   81f4   fe                    SHL
   81f5   fe                    SHL
   81f6   fe                    SHL
   81f7   fe                    SHL
   81f8   52                    STR     R2
   81f9   f8 83 bc f8           LOAD    RC,ONES
   81fd   02 ac         
   81ff   ec                    SEX     RC
   8200   02                    LDN     R2   
   8201   f1                    OR
   8202   5e                    STR     RE              ; STORE THE PATTERN TO GPIO
                        
   8203   f8 80 b9 f8   UTENS:  LOAD    R9, VALUES      ; RELOAD R9 WITH VALUES
   8207   b1 a9         
   8209   f8 83 bc f8           LOAD    RC, TENS        ; RC WILL BECOME TENS
   820d   03 ac         
   820f   ec                    SEX     RC              ; CHANGE THE INDEX REGISTER TO RC
   8210   89                    GLO     R9              ; GET THE LOW VALUE FROM R9
   8211   f4                    ADD                     ; FIND THE BIT PATTERN TO DISPLAY
   8212   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR TENS
   8213   f8 80 b6 f8           LOAD    R6, BUFFER3     ; R6 BECOMES BUFFER 3
   8217   a7 a6         
   8219   09                    LDN     R9              ; LOAD THE BIT PATTERN FROM VALUES
   821a   56                    STR     R6              ; STORE THIS TO BUFFER3
                        
   821b   f8 80 b9 f8   UHNDRD: LOAD    R9, VALUES      ; R9 BECOMES VALUES
   821f   b1 a9         
   8221   f8 83 bc f8           LOAD    RC, HUNDREDS    ; RC BECOMES HUDREDS
   8225   04 ac         
   8227   ec                    SEX     RC              ; CHANGE THE INDEX REGISTER TO RC
   8228   89                    GLO     R9              ; GET THE LOW BYTE OF VALUES
   8229   f4                    ADD                     ; FIND THE BIT PATTERN TO DISPLAY
   822a   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR HUNDREDS
   822b   f8 80 b6 f8           LOAD    R6, BUFFER4     ; R6 BECOMES BUFFER4
   822f   a6 a6         
   8231   09                    LDN     R9              ; LOAD THE BIT PATTERN
   8232   56                    STR     R6              ; STORE THIS TO BUFFER4
                        
   8233   f8 80 b9 f8   UTHOU:  LOAD    R9, VALUES      ; LOAD R9 WITH START OF BIT PATTERNS
   8237   b1 a9         
   8239   f8 83 bc f8           LOAD    RC, THOUSANDS   ; RC BECOMES THOUSANDS
   823d   05 ac         
   823f   ec                    SEX     RC              ; RC BECOMES INDEX REGISTER
   8240   89                    GLO     R9              ; GET THE STARTING ADDRESS OF VALUES
   8241   f4                    ADD                     ; FIND THE BIT PATTERN WE NEED
   8242   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR THOUSANDS
   8243   f8 80 b6 f8           LOAD    R6, BUFFER5     ; R6 NOW BECOMES BUFFER5
   8247   a5 a6         
   8249   09                    LDN     R9              ; LOAD THE BIT PATTERN WE NEED
   824a   56                    STR     R6              ; STORE THIS TO BUFFER5
                        
                        
   824b   35 6e         CHKEF1: B2      EF2P    ; IF 2 IS PRESSED, SHUT OFF Q, AND RESET
   824d   3c 5a                 BN1     RSFLAG  ; IF 1 IS NOT PRESSED, RESET FLAGS
   824f   0d                    LDN     RD      ; LOAD EFLAGS
   8250   32 55                 BZ      ACTOK   ; IF IT'S ZERO, THEN OK TO ACT (ONESHOT)
   8252   c0 80 73              LBR     CONT2   ; CONTINUE
                        
   8255   31 60         ACTOK:  BQ      RESQ    ; IF Q IS ON, RESET Q
   8257   c0 82 67              LBR     SETQ    ; OTHERWISE TURN ON Q
                        
                        
   825a   f8 00         RSFLAG: LDI     00H     ; LOAD 0 TO ACCUMULATOR
   825c   5d                    STR     RD      ; RESET EFLAGS
   825d   c0 80 73              LBR     CONT2   ; CONTINUE
                        
   8260   7a            RESQ:   REQ             ; SHUT OFF Q
   8261   f8 01                 LDI     01H     ; LOAD 1 TO ACCUMULATOR
   8263   5d                    STR     RD      ; SET EFLAGS
   8264   c0 80 73              LBR     CONT2   ; CONTINUE
                        
   8267   7b            SETQ:   SEQ             ; TURN ON Q
   8268   f8 01                 LDI     01H     ; LOAD 1 TO ACCUMULATOR
   826a   5d                    STR     RD      ; SET EFLAGS
   826b   c0 80 73              LBR     CONT2   ; JUMP TO CONT2
                        
   826e   7a            EF2P:   REQ             ; SHUT OFF Q
   826f   c0 80 c0              LBR     UNCZRO  ; JUMP TO UNCONDITIONAL ZERO
   8272                         END
8255  ACTOK         2756  BREAK         80aa  BUFFER0       80a9  BUFFER1   
80a8  BUFFER2       80a7  BUFFER3       80a6  BUFFER4       80a5  BUFFER5   
824b  CHKEF1        807f  CONT          81a1  CONT1         8073  CONT2     
80f9  COUNT         809b  DELAY         809e  DELAY1        7101  DIGIT     
826e  EF2P          8307  EFLAGS        8306  FREERUN       7000  GPIO1     
8304  HUNDREDS      8300  HUNDREDTHS    80fc  IHNTH         8167  IHUN      
8000  INIT          812d  IONES         814a  ITENS         8184  ITHOU     
8110  ITNTH         80bb  LIHNTH        8088  LOOP          8064  MAIN      
8302  ONES          0000  R0            0001  R1            0002  R2        
0003  R3            0004  R4            0005  R5            0006  R6        
0007  R7            0008  R8            0009  R9            000a  RA        
000b  RB            000c  RC            000d  RD            000e  RE        
8260  RESQ          809a  RET_DELAY     000f  RF            825a  RSFLAG    
80ab  SCAN_DIGIT    7102  SEGMENT       8267  SETQ          8308  TEMP      
8303  TENS          8301  TENTHS        8305  THOUSANDS     821b  UHNDRD    
81a5  UHNTH         80c0  UNCZRO        81d5  UONES         81a4  UPDB      
8203  UTENS         8233  UTHOU         81bd  UTNTHS        80b1  VALUES    
80be  ZERO          
