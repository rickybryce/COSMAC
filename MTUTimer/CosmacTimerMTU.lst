                        ; CLOCK PROGRAM FOR COSMAC MICROCONTROLLER TRAINING UNIT
                        ; EF1 STARTS AND PAUSES THE TIMER
                        ; EF2 RESETS THE TIMER
                        ; COMPILED WITH A18 ASSEMBLER
                        ; IN DEBIAN LINUX, I CREATED THE FOLLOWING SCRIPT
                        ; NAMED ASM18
                        
                        ; #!/bin/bash
                        ;./a18 $1.asm -l $1.lst -o $1.hex
                        
                        ; THEN MAKE IT EXECUTABLE chmod +x ASM18
                        ; TO COMPILE:  ./ASM18 FILENAME
                        
                        
   7000                 GPIO1:      EQU 7000H
   7102                 SEGMENT:    EQU 7102H
   7101                 DIGIT:      EQU 7101H
   8300                 HUNDREDTHS: EQU 8300H
   8301                 TENTHS:     EQU 8301H
   8302                 ONES:       EQU 8302H
   8303                 TENS:       EQU 8303H
   8304                 HUNDREDS:   EQU 8304H
   8305                 THOUSANDS:  EQU 8305H
   8306                 FREERUN:    EQU 8306H
   8307                 EFLAGS:     EQU 8307H
   2756                 BREAK:      EQU 2756H
                        
                        
   8000                     ORG    8000H
   0000                 R0    EQU    0  ; PROGRAM COUNTER
   0001                 R1    EQU    1
   0002                 R2    EQU    2
   0003                 R3    EQU    3
   0004                 R4    EQU    4  ; SEGMENT
   0005                 R5    EQU    5
   0006                 R6    EQU    6  ; BUFFER WORKSPACE
   0007                 R7    EQU    7  ; DELAY
   0008                 R8    EQU    8  ; LOOP COUNT FOR DIGIT SCAN
   0009                 R9    EQU    9  ; VALUES
   000a                 RA    EQU    10 ; BUFFERS
   000b                 RB    EQU    11 ; SCAN DIGIT
   000c                 RC    EQU    12 ; INDIRECT REGISTER
   000d                 RD    EQU    13 ; EFLAGS
   000e                 RE    EQU    14 ; GPIO
   000f                 RF    EQU    15 ; FREERUN
                        
   8000   f8 80 b3 f8   INIT:  LOAD    R3, DELAY     ; INITIALIZE REGISTERS
   8004   9a a3         
   8006   f8 71 b4 f8           LOAD    R4, SEGMENT     ; INDIVIDUAL SEGMENTS OF DIGIT
   800a   02 a4         
   800c   f8 71 b5 f8           LOAD    R5, DIGIT       ; TURN ON DIGIT
   8010   01 a5         
   8012   f8 83 bf f8           LOAD    RF, FREERUN     ; DELAY LOOP (FREE RUNNING)
   8016   06 af         
   8018   f8 00                 LDI     00H             ; LOAD ZERO TO ACCUMULATOR
   801a   5f                    STR     RF              ; CLEAR FREERUN
   801b   f8 70 be f8           LOAD    RE, GPIO1       ; RE WILL BE FORGPIO
   801f   00 ae         
   8021   f8 00                 LDI     00H             ; RELOAD ZERO TO ACCUMULATOR
   8023   f8 83 bd f8           LOAD    RD, EFLAGS      ; RD WILL BE FOR EFLAGS
   8027   07 ad         
   8029   f8 00                 LDI     00H             ; RELOAD ZERO TO ACCUMULATOR
   802b   5d                    STR     RD              ; CLEAR EFLAGS
   802c   f8 83 bc f8           LOAD    RC, HUNDREDTHS  ; RC BECOMES HUNDREDTHS MEMORY
   8030   00 ac         
   8032   f8 00                 LDI     00H             ; RELOAD ZERO
   8034   5c                    STR     RC              ; CLEAR HUNDREDTHS
   8035   f8 83 bc f8           LOAD    RC, TENTHS      ; NOW, RC BECOMES TENTHS
   8039   01 ac         
   803b   f8 00                 LDI     00H             ; RELOAD ZERO
   803d   5c                    STR     RC              ; CLEAR TENTHS
   803e   f8 83 bc f8           LOAD    RC, ONES        ; NOW LOAD RC WITH ONES
   8042   02 ac         
   8044   f8 00                 LDI     00H             ; RELOAD ZERO
   8046   5c                    STR     RC              ; CLEAR ONES
   8047   f8 83 bc f8           LOAD    RC, TENS        ; RC BECOMES TENS
   804b   03 ac         
   804d   f8 00                 LDI     00H             ; RELOAD ZERO
   804f   5c                    STR     RC              ; CLEAR TENS
   8050   f8 83 bc f8           LOAD    RC, HUNDREDS    ; RC BECOMES HUNDREDS
   8054   04 ac         
   8056   f8 00                 LDI     00H             ; RELOAD ZERO
   8058   5c                    STR     RC              ; CLEAR HUNDREDS
   8059   f8 83 bc f8           LOAD    RC, THOUSANDS   ; FINALLY RC=THOUSANDS MEMORY
   805d   05 ac         
   805f   f8 00                 LDI     00H             ; RELOAD ZERO
   8061   5c                    STR     RC              ; CLEAR THOUSANDS
   8062   7a                    REQ                     ; SHUT OFF Q OUTPUT (RESET)
                        
   8063   f8 80 ba f8   MAIN:   LOAD    RA, BUFFER5     ; RA BECOMES BUFFERS MEMORY
   8067   a3 aa         
   8069   f8 80 b9 f8           LOAD    R9, VALUES      ; R9 BECOMES VALUES MEMORY
   806d   af a9         
   806f   c0 82 34              LBR     CHKEF1          ; CHECK EF BUTTONS
   8072   39 7e         CONT2:  BNQ     CONT            ; IF Q IS NOT SET, CONTINUE
   8074   ef                    SEX     RF              ; SET INDEX REGISTER TO FREE RUN
   8075   f8 01                 LDI     01H             ; LOAD ACCUMULATOR WITH 1
   8077   f4                    ADD                     ; ADD 1 TO FREERUN
   8078   5f                    STR     RF              ; UPDATE FREERUN
   8079   fb 1f                 XRI     1FH             ; CALIBRATE TIME
   807b   c2 80 f7              LBZ     COUNT           ; IF TIME IS REACHED, THEN COUNT
   807e   f8 80 bb f8   CONT:   LOAD    RB, SCAN_DIGIT  ; OUTPUT TO TURN ON DIGITS
   8082   a9 ab         
   8084   f8 06                 LDI     6               ; WE HAVE 6 DIGITS
   8086   a8                    PLO     R8      ; LOOP COUNT
   8087   0b            LOOP:   LDN     RB      ; GET DIGIT CONTROL
   8088   fb ff                 XRI     0FFH    ; COMPLEMENT IT (ACTIVE LOW)
   808a   55                    STR     R5      ; WRITE TO DIGIT
   808b   0a                    LDN     RA      ; GET BYTE FROM BUFFER
   808c   54                    STR     R4      ; WRITE TO SEGMENT
   808d   d3                    SEP     R3      ; DELAY
   808e   f8 00                 LDI     0       ; TURN OFF DISPLAY
   8090   54                    STR     R4      ; ZERO SEGMENT
   8091   1a                    INC     RA      ; INCREMENT BUFFER
   8092   1b                    INC     RB      ; INCREMENT DIGIT
   8093   28                    DEC     R8      ; DECREMENT LOOP COUNT
   8094   88                    GLO     R8      ; GET THE LOOP NUMBER
   8095   3a 87                 BNZ     LOOP    ; CONTINUE UNTIL 6 DIGITS
   8097   30 63                 BR      MAIN    ; GO TO MAIN ROUTINE
                        
                        
   8099   d0            RET_DELAY: SEP  R0      ; EXIT SUBROUTINE SET PC BACK TO R0
   809a   f8 01         DELAY:  LDI     1       ; LOAD 1 TO ACC
   809c   a7                    PLO     R7      ; PLACE 1 INTO R7
   809d   27            DELAY1: DEC     R7      ; DECREMENT R7
   809e   87                    GLO     R7      ; GET R7 AGAIN
   809f   3a 9d                 BNZ     DELAY1  ; CONTINUE UNTIL R7=0
   80a1   30 99                 BR      RET_DELAY ; EXIT SUBROUTINE
                        
                        
   80a3   bd            BUFFER5:     DB 0BDH ; ZERO THOUSANDS
   80a4   bd            BUFFER4:     DB 0BDH ; ZERO HUNDREDS
   80a5   bd            BUFFER3:     DB 0BDH ; ZERO TENS
   80a6   bd            BUFFER2:     DB 0BDH ; ZERO ONES
   80a7   bd            BUFFER1:     DB 0BDH ; ZERO TENTHS
   80a8   bd            BUFFER0:     DB 0BDH ; ZERO HUNDREDTHS
   80a9   20 10 08 04   SCAN_DIGIT: DB 20H, 10H, 8, 4, 2, 1 ; BIT NUMBERS TO TURN ON EACH DISPLAY
   80ad   02 01         
                                        ; VALUES THAT REPRESENT NUMBERS
   80af   bd 30 9b ba   VALUES:     DB 0BDH, 030H, 09BH, 0BAH, 036H, 0AEH, 0AFH, 038H, 0BFH, 03EH
   80b3   36 ae af 38   
   80b7   bf 3e         
                        
                        
   80b9   c0 80 fa      LIHNTH: LBR     IHNTH
                        
   80bc   3d b9         ZERO:   BN2     LIHNTH
   80be   f8 83 bc f8   UNCZRO: LOAD    RC, HUNDREDTHS  ; LOAD RC WITH HUNDREDS
   80c2   00 ac         
   80c4   f8 00                 LDI     00H             ; LOAD ZERO TO ACC
   80c6   5c                    STR     RC              ; ZERO HUNDREDTHS
   80c7   f8 83 bc f8           LOAD    RC, TENTHS      ; LOAD RC WITH TENTHS
   80cb   01 ac         
   80cd   f8 00                 LDI     00H             ; ZERO ACC
   80cf   5c                    STR     RC              ; RESET TENTHS
   80d0   f8 83 bc f8           LOAD    RC, ONES        ; LOAD RC WITH ONES
   80d4   02 ac         
   80d6   f8 00                 LDI     00H             ; ZERO ACC
   80d8   5c                    STR     RC              ; RESET ONES
   80d9   f8 83 bc f8           LOAD    RC, TENS        ; LOAD RC WITH TENS
   80dd   03 ac         
   80df   f8 00                 LDI     00H             ; ZERO ACC
   80e1   5c                    STR     RC              ; RESET TENS
   80e2   f8 83 bc f8           LOAD    RC, HUNDREDS    ; LOAD RC WITH HUNDREDS
   80e6   04 ac         
   80e8   f8 00                 LDI     00H             ; ZERO ACC
   80ea   5c                    STR     RC              ; SERO HUNDREDS
   80eb   f8 83 bc f8           LOAD    RC, THOUSANDS   ; LOAD RC WITH THOUSANDS
   80ef   05 ac         
   80f1   f8 00                 LDI     00H             ; LOAD ZERO TO ACC
   80f3   5c                    STR     RC              ; ZERO THOUSANDS
   80f4   c0 81 a2              LBR     UPDB            ; UPDATE
                        
   80f7   f8 00         COUNT:  LDI     00H             ; LOAD ZERO TO ACCUMULATOR
   80f9   5f                    STR     RF              ; ZERO FREERUN
   80fa   f8 83 bc f8   IHNTH:  LOAD    RC, HUNDREDTHS  ; RC BECOMES HUNDREDTHS
   80fe   00 ac         
   8100   ec                    SEX     RC              ; SET INDEX REGISTER TO RC
   8101   f8 02                 LDI     02H             ; LOAD 02H (TOO SLOW FOR 01)
                                                        ; SO WE ONLY COUNT BY 2
   8103   f4                    ADD                     ;INCREMENT TIMER
   8104   5c                    STR     RC      ;HUNDREDTHS NOW CONTAINS THE HUNDREDTHS VALUE
   8105   0c                    LDN     RC              ; LOAD HUNDREDTHS
   8106   fb 0a                 XRI     0AH             ; SEE IF IT'S REACHED 0A
   8108   c2 81 0e              LBZ     ITNTH           ; IF SO, INC TENTHS, RESET HUNDREDTHS
   810b   c0 81 a2              LBR     UPDB            ; IF NOT, UPDATE THE DISPLAY
                        
   810e   f8 83 bc f8   ITNTH:  LOAD    RC, HUNDREDTHS  ; RELOAD RC WITH HUNDREDTHS
   8112   00 ac         
   8114   f8 00                 LDI     0H              ; LOAD ZERO TO ACC
   8116   5c                    STR     RC              ; ZERO HUNDREDTHS
   8117   f8 83 bc f8           LOAD    RC, TENTHS      ; RELOAD RC WITH TENTHS
   811b   01 ac         
   811d   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   811e   f8 01                 LDI     01H             ; LOAD 1 TO THE ACCUMULATOR
   8120   f4                    ADD                     ; ADD 1 TO TENTHS
   8121   5c                    STR     RC      ;RC NOW CONTAINS THE TENTHS VALUES
   8122   0c                    LDN     RC              ; RELOAD RC
   8123   fb 0a                 XRI     0AH             ; CHECK IT FOR 0AH
   8125   c2 81 2b              LBZ     IONES           ; IF SO, THEN RESET TENTHS, INC ONES
   8128   c0 81 a2              LBR     UPDB            ; OTHERWISE UPDATE
                        
   812b   f8 83 bc f8   IONES:  LOAD    RC, TENTHS      ; LOAD RC WITH TENTHS
   812f   01 ac         
   8131   f8 00                 LDI     0H              ; ZERO ACCUMULATOR
   8133   5c                    STR     RC              ;CLEAR TENTHS
   8134   f8 83 bc f8           LOAD    RC, ONES        ; RELOAD RC WITH ONES
   8138   02 ac         
   813a   ec                    SEX     RC              ; SET RC AS THE INDEX REGISTER
   813b   f8 01                 LDI     01H             ; LOAD 01H TO ACC
   813d   f4                    ADD                     ; ADD 1 TO ONES
   813e   5c                    STR     RC      ;RC NOW CONTAINS THE ONES VALUES
   813f   0c                    LDN     RC              ; RELOAD ONES
   8140   fb 0a                 XRI     0AH             ; SEE IF IT'S REACHED 0AH
   8142   c2 81 48              LBZ     ITENS           ; IF SO, THEN RESET ONES, INCREMENT TENS
   8145   c0 81 a2              LBR     UPDB            ; OTHERWISE, UPDATE
                        
   8148   f8 83 bc f8   ITENS:  LOAD    RC, ONES        ; LOAD RC WITH ONES
   814c   02 ac         
   814e   f8 00                 LDI     0H              ; ZERO ACC
   8150   5c                    STR     RC              ;ONES ARE NOW ZERO
   8151   f8 83 bc f8           LOAD    RC, TENS        ; RELOAD RC WITH TENS
   8155   03 ac         
   8157   ec                    SEX     RC              ; SET RC AS THE INDEX REGISTER
   8158   f8 01                 LDI     01H             ; LOAD 1 TO ACCUMULATOR
   815a   f4                    ADD                     ; ADD ONE TO TENS
   815b   5c                    STR     RC              ; STORE INCREMENTED VALUE TO TENS
   815c   0c                    LDN     RC              ; RLOAD RC
   815d   fb 0a                 XRI     0AH             ; CHECK TO SEE IF IT'S REACHED A
   815f   c2 81 65              LBZ     IHUN            ; IF SO, RESET TENS, INCREMENT HUNDREDS
   8162   c0 81 a2              LBR     UPDB            ; OTHERWISE, UPDATE
                        
   8165   f8 83 bc f8   IHUN:   LOAD    RC, TENS        ; LOAD RC WITH TENS
   8169   03 ac         
   816b   f8 00                 LDI     0H              ; ZERO ACC
   816d   5c                    STR     RC              ; TENS NOW CONTAINS A ZERO
   816e   f8 83 bc f8           LOAD    RC, HUNDREDS    ; SET RC TO HUNDREDS
   8172   04 ac         
   8174   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   8175   f8 01                 LDI     01H             ; LOAD 1 TO ACC
   8177   f4                    ADD                     ; ADD 1 TO HUNDREDS
   8178   5c                    STR     RC              ; HUNDREDS NOW HAVE THE INCREMENTED VALUE
   8179   0c                    LDN     RC              ; RELOAD HUNDREDS
   817a   fb 0a                 XRI     0AH             ; SEE IF IT'S REACHED A
   817c   c2 81 82              LBZ     ITHOU           ; IF SO, RESET HUNDREDS, INCREMENT THOUSANDS
   817f   c0 81 a2              LBR     UPDB            ; OTHERWISE, UPDATE
                        
   8182   f8 83 bc f8   ITHOU:  LOAD    RC, HUNDREDS    ; LOAD RC WITH HUNDREDS
   8186   04 ac         
   8188   f8 00                 LDI     0H              ; LOAD ZERO TO ACC
   818a   5c                    STR     RC              ; STORE ZERO TO HUNDREDS
   818b   f8 83 bc f8           LOAD    RC, THOUSANDS   ; RC BECOMES THOUSANDS
   818f   05 ac         
   8191   ec                    SEX     RC              ; SET INDEX REGISTER TO RC
   8192   f8 01                 LDI     01H             ; LOAD 1 TO ACC
   8194   f4                    ADD                     ; INCREMENT THOUSANDS
   8195   5c                    STR     RC              ; THOUSANDS NOW CONTAIN INCREMENTED VALUE
   8196   0c                    LDN     RC              ; RELOAD THOUSANDS
   8197   fb 0a                 XRI     0AH             ; CHECK TO SEE IF IT'S REACHED A
   8199   c2 80 be              LBZ     UNCZRO          ; IF SO, RESTART TIMER
   819c   c0 81 a2              LBR     UPDB            ; OTHERWISE UPDATE
                        
   819f   c0 80 7e      CONT1:  LBR     CONT            ; CONTINUE (SHORT TO LONG BRANCH ADAPTER)
                        
                        
   81a2   c4            UPDB:   NOP     ; UPDATE LOGIC
   81a3   f8 80 b9 f8   UHNTH:  LOAD    R9, VALUES      ; R9 IS VALUES
   81a7   af a9         
   81a9   f8 83 bc f8           LOAD    RC, HUNDREDTHS  ; START RC WITH HUNDREDTHS
   81ad   00 ac         
   81af   ec                    SEX     RC              ; INDEX REGISTER WILL BE RC
   81b0   89                    GLO     R9              ; GET THE LOW BYTE
   81b1   f4                    ADD                     ; ADD LOW BYTE TO GET BIT PATTERN
   81b2   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR HUNDREDTHS
   81b3   f8 80 b6 f8           LOAD    R6, BUFFER0     ; R6 BECOMES BUFFER ZERO
   81b7   a8 a6         
   81b9   09                    LDN     R9              ; LOAD VALUE OF HUNDREDTHS
   81ba   56                    STR     R6              ; STORE TO R6 (BUFFER0 WORKSPACE)
                        
   81bb   f8 80 b9 f8   UTNTHS: LOAD    R9, VALUES      ; R9 IS VALUES
   81bf   af a9         
   81c1   f8 83 bc f8           LOAD    RC, TENTHS      ; RC IS NOW TENTHS
   81c5   01 ac         
   81c7   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   81c8   89                    GLO     R9              ; GET THE BITT PATTERN ADDRESS
   81c9   f4                    ADD                     ; FIND THE RIGHT BITT PATTERN
   81ca   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR TENTHS
   81cb   f8 80 b6 f8           LOAD    R6, BUFFER1     ; R6 BECOMES BUFFER 1
   81cf   a7 a6         
   81d1   09                    LDN     R9              ; LOAD THE BIT PATTERN TO MEMORY
   81d2   56                    STR     R6              ; STORE THIS TO BUFFER1
                        
                        
   81d3   f8 80 b9 f8   UONES:  LOAD    R9, VALUES      ; BE SURE R9 IS CODED VALUES
   81d7   af a9         
   81d9   f8 83 bc f8           LOAD    RC, ONES        ; RC BECOMES ONES
   81dd   02 ac         
   81df   ec                    SEX     RC              ; SET THE INDEX REGISTER TO RC
   81e0   89                    GLO     R9              ; GET STARTING VALUE CODE FROM FROM R9
   81e1   f4                    ADD                     ; FIND THE BIT PATTERN TO DISPLAY
   81e2   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR ONES
   81e3   f8 80 b6 f8           LOAD    R6, BUFFER2     ; R6 BECOMES BUFFER2
   81e7   a6 a6         
   81e9   09                    LDN     R9              ; LOAD THE BIT PATTERN FOR THE VALUE
   81ea   56                    STR     R6              ; STORE THIS TO BUFFER2
   81eb   5e                    STR     RE              ; STORE THE PATTERN TO GPIO
                        
   81ec   f8 80 b9 f8   UTENS:  LOAD    R9, VALUES      ; RELOAD R9 WITH VALUES
   81f0   af a9         
   81f2   f8 83 bc f8           LOAD    RC, TENS        ; RC WILL BECOME TENS
   81f6   03 ac         
   81f8   ec                    SEX     RC              ; CHANGE THE INDEX REGISTER TO RC
   81f9   89                    GLO     R9              ; GET THE LOW VALUE FROM R9
   81fa   f4                    ADD                     ; FIND THE BIT PATTERN TO DISPLAY
   81fb   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR TENS
   81fc   f8 80 b6 f8           LOAD    R6, BUFFER3     ; R6 BECOMES BUFFER 3
   8200   a5 a6         
   8202   09                    LDN     R9              ; LOAD THE BIT PATTERN FROM VALUES
   8203   56                    STR     R6              ; STORE THIS TO BUFFER3
                        
   8204   f8 80 b9 f8   UHNDRD: LOAD    R9, VALUES      ; R9 BECOMES VALUES
   8208   af a9         
   820a   f8 83 bc f8           LOAD    RC, HUNDREDS    ; RC BECOMES HUDREDS
   820e   04 ac         
   8210   ec                    SEX     RC              ; CHANGE THE INDEX REGISTER TO RC
   8211   89                    GLO     R9              ; GET THE LOW BYTE OF VALUES
   8212   f4                    ADD                     ; FIND THE BIT PATTERN TO DISPLAY
   8213   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR HUNDREDS
   8214   f8 80 b6 f8           LOAD    R6, BUFFER4     ; R6 BECOMES BUFFER4
   8218   a4 a6         
   821a   09                    LDN     R9              ; LOAD THE BIT PATTERN
   821b   56                    STR     R6              ; STORE THIS TO BUFFER4
                        
   821c   f8 80 b9 f8   UTHOU:  LOAD    R9, VALUES      ; LOAD R9 WITH START OF BIT PATTERNS
   8220   af a9         
   8222   f8 83 bc f8           LOAD    RC, THOUSANDS   ; RC BECOMES THOUSANDS
   8226   05 ac         
   8228   ec                    SEX     RC              ; RC BECOMES INDEX REGISTER
   8229   89                    GLO     R9              ; GET THE STARTING ADDRESS OF VALUES
   822a   f4                    ADD                     ; FIND THE BIT PATTERN WE NEED
   822b   a9                    PLO     R9  ;R9 NOW SET TO WHERE WE NEED DATA FOR THOUSANDS
   822c   f8 80 b6 f8           LOAD    R6, BUFFER5     ; R6 NOW BECOMES BUFFER5
   8230   a3 a6         
   8232   09                    LDN     R9              ; LOAD THE BIT PATTERN WE NEED
   8233   56                    STR     R6              ; STORE THIS TO BUFFER5
                        
                        
   8234   35 57         CHKEF1: B2      EF2P    ; IF 2 IS PRESSED, SHUT OFF Q, AND RESET
   8236   3c 43                 BN1     RSFLAG  ; IF 1 IS NOT PRESSED, RESET FLAGS
   8238   0d                    LDN     RD      ; LOAD EFLAGS
   8239   32 3e                 BZ      ACTOK   ; IF IT'S ZERO, THEN OK TO ACT (ONESHOT)
   823b   c0 80 72              LBR     CONT2   ; CONTINUE
                        
   823e   31 49         ACTOK:  BQ      RESQ    ; IF Q IS ON, RESET Q
   8240   c0 82 50              LBR     SETQ    ; OTHERWISE TURN ON Q
                        
                        
   8243   f8 00         RSFLAG: LDI     00H     ; LOAD 0 TO ACCUMULATOR
   8245   5d                    STR     RD      ; RESET EFLAGS
   8246   c0 80 72              LBR     CONT2   ; CONTINUE
                        
   8249   7a            RESQ:   REQ             ; SHUT OFF Q
   824a   f8 01                 LDI     01H     ; LOAD 1 TO ACCUMULATOR
   824c   5d                    STR     RD      ; SET EFLAGS
   824d   c0 80 72              LBR     CONT2   ; CONTINUE
                        
   8250   7b            SETQ:   SEQ             ; TURN ON Q
   8251   f8 01                 LDI     01H     ; LOAD 1 TO ACCUMULATOR
   8253   5d                    STR     RD      ; SET EFLAGS
   8254   c0 80 72              LBR     CONT2   ; JUMP TO CONT2
                        
   8257   7a            EF2P:   REQ             ; SHUT OFF Q
   8258   c0 80 be              LBR     UNCZRO  ; JUMP TO UNCONDITIONAL ZERO
   825b                         END
823e  ACTOK         2756  BREAK         80a8  BUFFER0       80a7  BUFFER1   
80a6  BUFFER2       80a5  BUFFER3       80a4  BUFFER4       80a3  BUFFER5   
8234  CHKEF1        807e  CONT          819f  CONT1         8072  CONT2     
80f7  COUNT         809a  DELAY         809d  DELAY1        7101  DIGIT     
8257  EF2P          8307  EFLAGS        8306  FREERUN       7000  GPIO1     
8304  HUNDREDS      8300  HUNDREDTHS    80fa  IHNTH         8165  IHUN      
8000  INIT          812b  IONES         8148  ITENS         8182  ITHOU     
810e  ITNTH         80b9  LIHNTH        8087  LOOP          8063  MAIN      
8302  ONES          0000  R0            0001  R1            0002  R2        
0003  R3            0004  R4            0005  R5            0006  R6        
0007  R7            0008  R8            0009  R9            000a  RA        
000b  RB            000c  RC            000d  RD            000e  RE        
8249  RESQ          8099  RET_DELAY     000f  RF            8243  RSFLAG    
80a9  SCAN_DIGIT    7102  SEGMENT       8250  SETQ          8303  TENS      
8301  TENTHS        8305  THOUSANDS     8204  UHNDRD        81a3  UHNTH     
80be  UNCZRO        81d3  UONES         81a2  UPDB          81ec  UTENS     
821c  UTHOU         81bb  UTNTHS        80af  VALUES        80bc  ZERO      
